name: Quality Gate

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: true

      # Cache node_modules for reuse across jobs
      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies (if cache miss)
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile
        
      - name: Run linting
        run: pnpm lint
        
      - name: Check formatting
        run: pnpm format:check

  type-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      
      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies (if cache miss)
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile
      
      - name: Type check
        run: pnpm tsc --noEmit

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      
      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies (if cache miss)
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile
      
      - name: Run tests
        run: pnpm test

      # Optional: Upload test coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      
      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies (if cache miss)
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile
      
      - name: Build project
        run: pnpm build

      # Optional: Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better secret detection

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      
      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies (if cache miss)
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile
          
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@v3.90.5
        with:
          path: .
          github_token: ${{ secrets.GITHUB_TOKEN }}
          extra_args: --only-verified --fail
          
      - name: Run pnpm audit
        run: pnpm audit --audit-level=moderate
        continue-on-error: true  # Don't fail CI for advisory-only issues

  codeql:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          queries: security-extended,security-and-quality
          
      - uses: github/codeql-action/autobuild@v3
      
      - uses: github/codeql-action/analyze@v3

  # Final quality gate check
  quality-gate:
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, build, security-scan, codeql]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "CodeQL: ${{ needs.codeql.result }}"
          
          if [[ "${{ needs.lint.result }}" != "success" || 
                "${{ needs.type-check.result }}" != "success" || 
                "${{ needs.test.result }}" != "success" || 
                "${{ needs.build.result }}" != "success" || 
                "${{ needs.security-scan.result }}" != "success" || 
                "${{ needs.codeql.result }}" != "success" ]]; then
            echo "❌ Quality gate failed"
            exit 1
          else
            echo "✅ Quality gate passed"
          fi
